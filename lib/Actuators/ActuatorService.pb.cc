// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActuatorService.proto

#include "ActuatorService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace Actuators {
class ActuatorPinDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActuatorPin> _instance;
} _ActuatorPin_default_instance_;
class ActuatorStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActuatorState> _instance;
} _ActuatorState_default_instance_;
}  // namespace Actuators
static void InitDefaultsscc_info_ActuatorPin_ActuatorService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Actuators::_ActuatorPin_default_instance_;
    new (ptr) ::Actuators::ActuatorPin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Actuators::ActuatorPin::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActuatorPin_ActuatorService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ActuatorPin_ActuatorService_2eproto}, {}};

static void InitDefaultsscc_info_ActuatorState_ActuatorService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Actuators::_ActuatorState_default_instance_;
    new (ptr) ::Actuators::ActuatorState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Actuators::ActuatorState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActuatorState_ActuatorService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ActuatorState_ActuatorService_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ActuatorService_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ActuatorService_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ActuatorService_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ActuatorService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Actuators::ActuatorPin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Actuators::ActuatorPin, pin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Actuators::ActuatorState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Actuators::ActuatorState, ison_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Actuators::ActuatorPin)},
  { 6, -1, sizeof(::Actuators::ActuatorState)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Actuators::_ActuatorPin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Actuators::_ActuatorState_default_instance_),
};

const char descriptor_table_protodef_ActuatorService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025ActuatorService.proto\022\tActuators\032\033goog"
  "le/protobuf/empty.proto\"\032\n\013ActuatorPin\022\013"
  "\n\003pin\030\001 \001(\r\"\035\n\rActuatorState\022\014\n\004isOn\030\001 \001"
  "(\0102\324\001\n\tActuators\022A\n\rStartActuator\022\026.Actu"
  "ators.ActuatorPin\032\026.google.protobuf.Empt"
  "y\"\000\022@\n\014StopActuator\022\026.Actuators.Actuator"
  "Pin\032\026.google.protobuf.Empty\"\000\022B\n\014IsActua"
  "torOn\022\026.Actuators.ActuatorPin\032\030.Actuator"
  "s.ActuatorState\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ActuatorService_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ActuatorService_2eproto_sccs[2] = {
  &scc_info_ActuatorPin_ActuatorService_2eproto.base,
  &scc_info_ActuatorState_ActuatorService_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ActuatorService_2eproto_once;
static bool descriptor_table_ActuatorService_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ActuatorService_2eproto = {
  &descriptor_table_ActuatorService_2eproto_initialized, descriptor_table_protodef_ActuatorService_2eproto, "ActuatorService.proto", 345,
  &descriptor_table_ActuatorService_2eproto_once, descriptor_table_ActuatorService_2eproto_sccs, descriptor_table_ActuatorService_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_ActuatorService_2eproto::offsets,
  file_level_metadata_ActuatorService_2eproto, 2, file_level_enum_descriptors_ActuatorService_2eproto, file_level_service_descriptors_ActuatorService_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ActuatorService_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ActuatorService_2eproto), true);
namespace Actuators {

// ===================================================================

void ActuatorPin::InitAsDefaultInstance() {
}
class ActuatorPin::_Internal {
 public:
};

ActuatorPin::ActuatorPin()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Actuators.ActuatorPin)
}
ActuatorPin::ActuatorPin(const ActuatorPin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pin_ = from.pin_;
  // @@protoc_insertion_point(copy_constructor:Actuators.ActuatorPin)
}

void ActuatorPin::SharedCtor() {
  pin_ = 0u;
}

ActuatorPin::~ActuatorPin() {
  // @@protoc_insertion_point(destructor:Actuators.ActuatorPin)
  SharedDtor();
}

void ActuatorPin::SharedDtor() {
}

void ActuatorPin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActuatorPin& ActuatorPin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActuatorPin_ActuatorService_2eproto.base);
  return *internal_default_instance();
}


void ActuatorPin::Clear() {
// @@protoc_insertion_point(message_clear_start:Actuators.ActuatorPin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pin_ = 0u;
  _internal_metadata_.Clear();
}

const char* ActuatorPin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 pin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActuatorPin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Actuators.ActuatorPin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pin = 1;
  if (this->pin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Actuators.ActuatorPin)
  return target;
}

size_t ActuatorPin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Actuators.ActuatorPin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pin = 1;
  if (this->pin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActuatorPin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Actuators.ActuatorPin)
  GOOGLE_DCHECK_NE(&from, this);
  const ActuatorPin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActuatorPin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Actuators.ActuatorPin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Actuators.ActuatorPin)
    MergeFrom(*source);
  }
}

void ActuatorPin::MergeFrom(const ActuatorPin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Actuators.ActuatorPin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pin() != 0) {
    _internal_set_pin(from._internal_pin());
  }
}

void ActuatorPin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Actuators.ActuatorPin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActuatorPin::CopyFrom(const ActuatorPin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Actuators.ActuatorPin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActuatorPin::IsInitialized() const {
  return true;
}

void ActuatorPin::InternalSwap(ActuatorPin* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pin_, other->pin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActuatorPin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActuatorState::InitAsDefaultInstance() {
}
class ActuatorState::_Internal {
 public:
};

ActuatorState::ActuatorState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Actuators.ActuatorState)
}
ActuatorState::ActuatorState(const ActuatorState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ison_ = from.ison_;
  // @@protoc_insertion_point(copy_constructor:Actuators.ActuatorState)
}

void ActuatorState::SharedCtor() {
  ison_ = false;
}

ActuatorState::~ActuatorState() {
  // @@protoc_insertion_point(destructor:Actuators.ActuatorState)
  SharedDtor();
}

void ActuatorState::SharedDtor() {
}

void ActuatorState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActuatorState& ActuatorState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActuatorState_ActuatorService_2eproto.base);
  return *internal_default_instance();
}


void ActuatorState::Clear() {
// @@protoc_insertion_point(message_clear_start:Actuators.ActuatorState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ison_ = false;
  _internal_metadata_.Clear();
}

const char* ActuatorState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool isOn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ison_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActuatorState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Actuators.ActuatorState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isOn = 1;
  if (this->ison() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ison(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Actuators.ActuatorState)
  return target;
}

size_t ActuatorState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Actuators.ActuatorState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isOn = 1;
  if (this->ison() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActuatorState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Actuators.ActuatorState)
  GOOGLE_DCHECK_NE(&from, this);
  const ActuatorState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActuatorState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Actuators.ActuatorState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Actuators.ActuatorState)
    MergeFrom(*source);
  }
}

void ActuatorState::MergeFrom(const ActuatorState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Actuators.ActuatorState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ison() != 0) {
    _internal_set_ison(from._internal_ison());
  }
}

void ActuatorState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Actuators.ActuatorState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActuatorState::CopyFrom(const ActuatorState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Actuators.ActuatorState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActuatorState::IsInitialized() const {
  return true;
}

void ActuatorState::InternalSwap(ActuatorState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ison_, other->ison_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActuatorState::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Actuators
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Actuators::ActuatorPin* Arena::CreateMaybeMessage< ::Actuators::ActuatorPin >(Arena* arena) {
  return Arena::CreateInternal< ::Actuators::ActuatorPin >(arena);
}
template<> PROTOBUF_NOINLINE ::Actuators::ActuatorState* Arena::CreateMaybeMessage< ::Actuators::ActuatorState >(Arena* arena) {
  return Arena::CreateInternal< ::Actuators::ActuatorState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
