// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ActuatorService.proto
#ifndef GRPC_ActuatorService_2eproto__INCLUDED
#define GRPC_ActuatorService_2eproto__INCLUDED

#include "ActuatorService.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace Actuators {

// The greeting service definition.
class Actuators final {
 public:
  static constexpr char const* service_full_name() {
    return "Actuators.Actuators";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Starts Actuator
    virtual ::grpc::Status StartActuator(::grpc::ClientContext* context, const ::Actuators::ActuatorPin& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncStartActuator(::grpc::ClientContext* context, const ::Actuators::ActuatorPin& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncStartActuatorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncStartActuator(::grpc::ClientContext* context, const ::Actuators::ActuatorPin& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncStartActuatorRaw(context, request, cq));
    }
    // Stops Actuator
    virtual ::grpc::Status StopActuator(::grpc::ClientContext* context, const ::Actuators::ActuatorPin& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncStopActuator(::grpc::ClientContext* context, const ::Actuators::ActuatorPin& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncStopActuatorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncStopActuator(::grpc::ClientContext* context, const ::Actuators::ActuatorPin& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncStopActuatorRaw(context, request, cq));
    }
    // Returns if Actuator is on/off
    virtual ::grpc::Status IsActuatorOn(::grpc::ClientContext* context, const ::Actuators::ActuatorPin& request, ::Actuators::ActuatorState* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Actuators::ActuatorState>> AsyncIsActuatorOn(::grpc::ClientContext* context, const ::Actuators::ActuatorPin& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Actuators::ActuatorState>>(AsyncIsActuatorOnRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Actuators::ActuatorState>> PrepareAsyncIsActuatorOn(::grpc::ClientContext* context, const ::Actuators::ActuatorPin& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Actuators::ActuatorState>>(PrepareAsyncIsActuatorOnRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Starts Actuator
      virtual void StartActuator(::grpc::ClientContext* context, const ::Actuators::ActuatorPin* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StartActuator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StartActuator(::grpc::ClientContext* context, const ::Actuators::ActuatorPin* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StartActuator(::grpc::ClientContext* context, const ::Actuators::ActuatorPin* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StartActuator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StartActuator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Stops Actuator
      virtual void StopActuator(::grpc::ClientContext* context, const ::Actuators::ActuatorPin* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StopActuator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StopActuator(::grpc::ClientContext* context, const ::Actuators::ActuatorPin* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StopActuator(::grpc::ClientContext* context, const ::Actuators::ActuatorPin* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StopActuator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StopActuator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Returns if Actuator is on/off
      virtual void IsActuatorOn(::grpc::ClientContext* context, const ::Actuators::ActuatorPin* request, ::Actuators::ActuatorState* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IsActuatorOn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Actuators::ActuatorState* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void IsActuatorOn(::grpc::ClientContext* context, const ::Actuators::ActuatorPin* request, ::Actuators::ActuatorState* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void IsActuatorOn(::grpc::ClientContext* context, const ::Actuators::ActuatorPin* request, ::Actuators::ActuatorState* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void IsActuatorOn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Actuators::ActuatorState* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void IsActuatorOn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Actuators::ActuatorState* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncStartActuatorRaw(::grpc::ClientContext* context, const ::Actuators::ActuatorPin& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncStartActuatorRaw(::grpc::ClientContext* context, const ::Actuators::ActuatorPin& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncStopActuatorRaw(::grpc::ClientContext* context, const ::Actuators::ActuatorPin& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncStopActuatorRaw(::grpc::ClientContext* context, const ::Actuators::ActuatorPin& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Actuators::ActuatorState>* AsyncIsActuatorOnRaw(::grpc::ClientContext* context, const ::Actuators::ActuatorPin& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Actuators::ActuatorState>* PrepareAsyncIsActuatorOnRaw(::grpc::ClientContext* context, const ::Actuators::ActuatorPin& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status StartActuator(::grpc::ClientContext* context, const ::Actuators::ActuatorPin& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncStartActuator(::grpc::ClientContext* context, const ::Actuators::ActuatorPin& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncStartActuatorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncStartActuator(::grpc::ClientContext* context, const ::Actuators::ActuatorPin& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncStartActuatorRaw(context, request, cq));
    }
    ::grpc::Status StopActuator(::grpc::ClientContext* context, const ::Actuators::ActuatorPin& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncStopActuator(::grpc::ClientContext* context, const ::Actuators::ActuatorPin& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncStopActuatorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncStopActuator(::grpc::ClientContext* context, const ::Actuators::ActuatorPin& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncStopActuatorRaw(context, request, cq));
    }
    ::grpc::Status IsActuatorOn(::grpc::ClientContext* context, const ::Actuators::ActuatorPin& request, ::Actuators::ActuatorState* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Actuators::ActuatorState>> AsyncIsActuatorOn(::grpc::ClientContext* context, const ::Actuators::ActuatorPin& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Actuators::ActuatorState>>(AsyncIsActuatorOnRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Actuators::ActuatorState>> PrepareAsyncIsActuatorOn(::grpc::ClientContext* context, const ::Actuators::ActuatorPin& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Actuators::ActuatorState>>(PrepareAsyncIsActuatorOnRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void StartActuator(::grpc::ClientContext* context, const ::Actuators::ActuatorPin* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void StartActuator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StartActuator(::grpc::ClientContext* context, const ::Actuators::ActuatorPin* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StartActuator(::grpc::ClientContext* context, const ::Actuators::ActuatorPin* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StartActuator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StartActuator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void StopActuator(::grpc::ClientContext* context, const ::Actuators::ActuatorPin* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void StopActuator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StopActuator(::grpc::ClientContext* context, const ::Actuators::ActuatorPin* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StopActuator(::grpc::ClientContext* context, const ::Actuators::ActuatorPin* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StopActuator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StopActuator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void IsActuatorOn(::grpc::ClientContext* context, const ::Actuators::ActuatorPin* request, ::Actuators::ActuatorState* response, std::function<void(::grpc::Status)>) override;
      void IsActuatorOn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Actuators::ActuatorState* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void IsActuatorOn(::grpc::ClientContext* context, const ::Actuators::ActuatorPin* request, ::Actuators::ActuatorState* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void IsActuatorOn(::grpc::ClientContext* context, const ::Actuators::ActuatorPin* request, ::Actuators::ActuatorState* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void IsActuatorOn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Actuators::ActuatorState* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void IsActuatorOn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Actuators::ActuatorState* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncStartActuatorRaw(::grpc::ClientContext* context, const ::Actuators::ActuatorPin& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncStartActuatorRaw(::grpc::ClientContext* context, const ::Actuators::ActuatorPin& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncStopActuatorRaw(::grpc::ClientContext* context, const ::Actuators::ActuatorPin& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncStopActuatorRaw(::grpc::ClientContext* context, const ::Actuators::ActuatorPin& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Actuators::ActuatorState>* AsyncIsActuatorOnRaw(::grpc::ClientContext* context, const ::Actuators::ActuatorPin& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Actuators::ActuatorState>* PrepareAsyncIsActuatorOnRaw(::grpc::ClientContext* context, const ::Actuators::ActuatorPin& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_StartActuator_;
    const ::grpc::internal::RpcMethod rpcmethod_StopActuator_;
    const ::grpc::internal::RpcMethod rpcmethod_IsActuatorOn_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Starts Actuator
    virtual ::grpc::Status StartActuator(::grpc::ServerContext* context, const ::Actuators::ActuatorPin* request, ::google::protobuf::Empty* response);
    // Stops Actuator
    virtual ::grpc::Status StopActuator(::grpc::ServerContext* context, const ::Actuators::ActuatorPin* request, ::google::protobuf::Empty* response);
    // Returns if Actuator is on/off
    virtual ::grpc::Status IsActuatorOn(::grpc::ServerContext* context, const ::Actuators::ActuatorPin* request, ::Actuators::ActuatorState* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_StartActuator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartActuator() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_StartActuator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartActuator(::grpc::ServerContext* /*context*/, const ::Actuators::ActuatorPin* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartActuator(::grpc::ServerContext* context, ::Actuators::ActuatorPin* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopActuator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StopActuator() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_StopActuator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopActuator(::grpc::ServerContext* /*context*/, const ::Actuators::ActuatorPin* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopActuator(::grpc::ServerContext* context, ::Actuators::ActuatorPin* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IsActuatorOn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IsActuatorOn() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_IsActuatorOn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsActuatorOn(::grpc::ServerContext* /*context*/, const ::Actuators::ActuatorPin* /*request*/, ::Actuators::ActuatorState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsActuatorOn(::grpc::ServerContext* context, ::Actuators::ActuatorPin* request, ::grpc::ServerAsyncResponseWriter< ::Actuators::ActuatorState>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_StartActuator<WithAsyncMethod_StopActuator<WithAsyncMethod_IsActuatorOn<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StartActuator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StartActuator() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Actuators::ActuatorPin, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Actuators::ActuatorPin* request, ::google::protobuf::Empty* response) { return this->StartActuator(context, request, response); }));}
    void SetMessageAllocatorFor_StartActuator(
        ::grpc::experimental::MessageAllocator< ::Actuators::ActuatorPin, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Actuators::ActuatorPin, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_StartActuator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartActuator(::grpc::ServerContext* /*context*/, const ::Actuators::ActuatorPin* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StartActuator(
      ::grpc::CallbackServerContext* /*context*/, const ::Actuators::ActuatorPin* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StartActuator(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Actuators::ActuatorPin* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StopActuator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StopActuator() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Actuators::ActuatorPin, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Actuators::ActuatorPin* request, ::google::protobuf::Empty* response) { return this->StopActuator(context, request, response); }));}
    void SetMessageAllocatorFor_StopActuator(
        ::grpc::experimental::MessageAllocator< ::Actuators::ActuatorPin, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Actuators::ActuatorPin, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_StopActuator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopActuator(::grpc::ServerContext* /*context*/, const ::Actuators::ActuatorPin* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StopActuator(
      ::grpc::CallbackServerContext* /*context*/, const ::Actuators::ActuatorPin* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StopActuator(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Actuators::ActuatorPin* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_IsActuatorOn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_IsActuatorOn() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Actuators::ActuatorPin, ::Actuators::ActuatorState>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Actuators::ActuatorPin* request, ::Actuators::ActuatorState* response) { return this->IsActuatorOn(context, request, response); }));}
    void SetMessageAllocatorFor_IsActuatorOn(
        ::grpc::experimental::MessageAllocator< ::Actuators::ActuatorPin, ::Actuators::ActuatorState>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Actuators::ActuatorPin, ::Actuators::ActuatorState>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_IsActuatorOn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsActuatorOn(::grpc::ServerContext* /*context*/, const ::Actuators::ActuatorPin* /*request*/, ::Actuators::ActuatorState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* IsActuatorOn(
      ::grpc::CallbackServerContext* /*context*/, const ::Actuators::ActuatorPin* /*request*/, ::Actuators::ActuatorState* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* IsActuatorOn(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Actuators::ActuatorPin* /*request*/, ::Actuators::ActuatorState* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_StartActuator<ExperimentalWithCallbackMethod_StopActuator<ExperimentalWithCallbackMethod_IsActuatorOn<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_StartActuator<ExperimentalWithCallbackMethod_StopActuator<ExperimentalWithCallbackMethod_IsActuatorOn<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_StartActuator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartActuator() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_StartActuator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartActuator(::grpc::ServerContext* /*context*/, const ::Actuators::ActuatorPin* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopActuator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StopActuator() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_StopActuator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopActuator(::grpc::ServerContext* /*context*/, const ::Actuators::ActuatorPin* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IsActuatorOn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IsActuatorOn() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_IsActuatorOn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsActuatorOn(::grpc::ServerContext* /*context*/, const ::Actuators::ActuatorPin* /*request*/, ::Actuators::ActuatorState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartActuator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartActuator() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_StartActuator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartActuator(::grpc::ServerContext* /*context*/, const ::Actuators::ActuatorPin* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartActuator(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StopActuator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StopActuator() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_StopActuator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopActuator(::grpc::ServerContext* /*context*/, const ::Actuators::ActuatorPin* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopActuator(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IsActuatorOn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IsActuatorOn() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_IsActuatorOn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsActuatorOn(::grpc::ServerContext* /*context*/, const ::Actuators::ActuatorPin* /*request*/, ::Actuators::ActuatorState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsActuatorOn(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StartActuator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StartActuator() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StartActuator(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_StartActuator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartActuator(::grpc::ServerContext* /*context*/, const ::Actuators::ActuatorPin* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StartActuator(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StartActuator(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StopActuator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StopActuator() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StopActuator(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_StopActuator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopActuator(::grpc::ServerContext* /*context*/, const ::Actuators::ActuatorPin* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StopActuator(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StopActuator(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_IsActuatorOn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_IsActuatorOn() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IsActuatorOn(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_IsActuatorOn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsActuatorOn(::grpc::ServerContext* /*context*/, const ::Actuators::ActuatorPin* /*request*/, ::Actuators::ActuatorState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* IsActuatorOn(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* IsActuatorOn(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartActuator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StartActuator() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Actuators::ActuatorPin, ::google::protobuf::Empty>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::Actuators::ActuatorPin, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedStartActuator(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StartActuator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartActuator(::grpc::ServerContext* /*context*/, const ::Actuators::ActuatorPin* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartActuator(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Actuators::ActuatorPin,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopActuator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StopActuator() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Actuators::ActuatorPin, ::google::protobuf::Empty>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::Actuators::ActuatorPin, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedStopActuator(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StopActuator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopActuator(::grpc::ServerContext* /*context*/, const ::Actuators::ActuatorPin* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopActuator(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Actuators::ActuatorPin,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IsActuatorOn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IsActuatorOn() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Actuators::ActuatorPin, ::Actuators::ActuatorState>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::Actuators::ActuatorPin, ::Actuators::ActuatorState>* streamer) {
                       return this->StreamedIsActuatorOn(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_IsActuatorOn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IsActuatorOn(::grpc::ServerContext* /*context*/, const ::Actuators::ActuatorPin* /*request*/, ::Actuators::ActuatorState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIsActuatorOn(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Actuators::ActuatorPin,::Actuators::ActuatorState>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_StartActuator<WithStreamedUnaryMethod_StopActuator<WithStreamedUnaryMethod_IsActuatorOn<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_StartActuator<WithStreamedUnaryMethod_StopActuator<WithStreamedUnaryMethod_IsActuatorOn<Service > > > StreamedService;
};

}  // namespace Actuators


#endif  // GRPC_ActuatorService_2eproto__INCLUDED
