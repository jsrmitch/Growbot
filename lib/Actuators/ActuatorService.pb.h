// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActuatorService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ActuatorService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ActuatorService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ActuatorService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ActuatorService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ActuatorService_2eproto;
namespace Actuators {
class ActuatorPin;
class ActuatorPinDefaultTypeInternal;
extern ActuatorPinDefaultTypeInternal _ActuatorPin_default_instance_;
class ActuatorState;
class ActuatorStateDefaultTypeInternal;
extern ActuatorStateDefaultTypeInternal _ActuatorState_default_instance_;
}  // namespace Actuators
PROTOBUF_NAMESPACE_OPEN
template<> ::Actuators::ActuatorPin* Arena::CreateMaybeMessage<::Actuators::ActuatorPin>(Arena*);
template<> ::Actuators::ActuatorState* Arena::CreateMaybeMessage<::Actuators::ActuatorState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Actuators {

// ===================================================================

class ActuatorPin :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Actuators.ActuatorPin) */ {
 public:
  ActuatorPin();
  virtual ~ActuatorPin();

  ActuatorPin(const ActuatorPin& from);
  ActuatorPin(ActuatorPin&& from) noexcept
    : ActuatorPin() {
    *this = ::std::move(from);
  }

  inline ActuatorPin& operator=(const ActuatorPin& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActuatorPin& operator=(ActuatorPin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActuatorPin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActuatorPin* internal_default_instance() {
    return reinterpret_cast<const ActuatorPin*>(
               &_ActuatorPin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ActuatorPin& a, ActuatorPin& b) {
    a.Swap(&b);
  }
  inline void Swap(ActuatorPin* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActuatorPin* New() const final {
    return CreateMaybeMessage<ActuatorPin>(nullptr);
  }

  ActuatorPin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActuatorPin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActuatorPin& from);
  void MergeFrom(const ActuatorPin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActuatorPin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Actuators.ActuatorPin";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ActuatorService_2eproto);
    return ::descriptor_table_ActuatorService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPinFieldNumber = 1,
  };
  // uint32 pin = 1;
  void clear_pin();
  ::PROTOBUF_NAMESPACE_ID::uint32 pin() const;
  void set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pin() const;
  void _internal_set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Actuators.ActuatorPin)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ActuatorService_2eproto;
};
// -------------------------------------------------------------------

class ActuatorState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Actuators.ActuatorState) */ {
 public:
  ActuatorState();
  virtual ~ActuatorState();

  ActuatorState(const ActuatorState& from);
  ActuatorState(ActuatorState&& from) noexcept
    : ActuatorState() {
    *this = ::std::move(from);
  }

  inline ActuatorState& operator=(const ActuatorState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActuatorState& operator=(ActuatorState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActuatorState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActuatorState* internal_default_instance() {
    return reinterpret_cast<const ActuatorState*>(
               &_ActuatorState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ActuatorState& a, ActuatorState& b) {
    a.Swap(&b);
  }
  inline void Swap(ActuatorState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActuatorState* New() const final {
    return CreateMaybeMessage<ActuatorState>(nullptr);
  }

  ActuatorState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActuatorState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActuatorState& from);
  void MergeFrom(const ActuatorState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActuatorState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Actuators.ActuatorState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ActuatorService_2eproto);
    return ::descriptor_table_ActuatorService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsOnFieldNumber = 1,
  };
  // bool isOn = 1;
  void clear_ison();
  bool ison() const;
  void set_ison(bool value);
  private:
  bool _internal_ison() const;
  void _internal_set_ison(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Actuators.ActuatorState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool ison_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ActuatorService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ActuatorPin

// uint32 pin = 1;
inline void ActuatorPin::clear_pin() {
  pin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActuatorPin::_internal_pin() const {
  return pin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActuatorPin::pin() const {
  // @@protoc_insertion_point(field_get:Actuators.ActuatorPin.pin)
  return _internal_pin();
}
inline void ActuatorPin::_internal_set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pin_ = value;
}
inline void ActuatorPin::set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pin(value);
  // @@protoc_insertion_point(field_set:Actuators.ActuatorPin.pin)
}

// -------------------------------------------------------------------

// ActuatorState

// bool isOn = 1;
inline void ActuatorState::clear_ison() {
  ison_ = false;
}
inline bool ActuatorState::_internal_ison() const {
  return ison_;
}
inline bool ActuatorState::ison() const {
  // @@protoc_insertion_point(field_get:Actuators.ActuatorState.isOn)
  return _internal_ison();
}
inline void ActuatorState::_internal_set_ison(bool value) {
  
  ison_ = value;
}
inline void ActuatorState::set_ison(bool value) {
  _internal_set_ison(value);
  // @@protoc_insertion_point(field_set:Actuators.ActuatorState.isOn)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Actuators

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ActuatorService_2eproto
