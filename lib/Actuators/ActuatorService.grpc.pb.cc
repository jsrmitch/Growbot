// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ActuatorService.proto

#include "ActuatorService.pb.h"
#include "ActuatorService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

// our libs
#include "GikfunAirDiaphragmPump.h"

namespace Actuators {

static const char* Actuators_method_names[] = {
  "/Actuators.Actuators/StartActuator",
  "/Actuators.Actuators/StopActuator",
  "/Actuators.Actuators/IsActuatorOn",
};

std::unique_ptr< Actuators::Stub> Actuators::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Actuators::Stub> stub(new Actuators::Stub(channel));
  return stub;
}

Actuators::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_StartActuator_(Actuators_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopActuator_(Actuators_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsActuatorOn_(Actuators_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Actuators::Stub::StartActuator(::grpc::ClientContext* context, const ::Actuators::ActuatorPin& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StartActuator_, context, request, response);
}

void Actuators::Stub::experimental_async::StartActuator(::grpc::ClientContext* context, const ::Actuators::ActuatorPin* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StartActuator_, context, request, response, std::move(f));
}

void Actuators::Stub::experimental_async::StartActuator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StartActuator_, context, request, response, std::move(f));
}

void Actuators::Stub::experimental_async::StartActuator(::grpc::ClientContext* context, const ::Actuators::ActuatorPin* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StartActuator_, context, request, response, reactor);
}

void Actuators::Stub::experimental_async::StartActuator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StartActuator_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Actuators::Stub::AsyncStartActuatorRaw(::grpc::ClientContext* context, const ::Actuators::ActuatorPin& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_StartActuator_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Actuators::Stub::PrepareAsyncStartActuatorRaw(::grpc::ClientContext* context, const ::Actuators::ActuatorPin& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_StartActuator_, context, request, false);
}

::grpc::Status Actuators::Stub::StopActuator(::grpc::ClientContext* context, const ::Actuators::ActuatorPin& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StopActuator_, context, request, response);
}

void Actuators::Stub::experimental_async::StopActuator(::grpc::ClientContext* context, const ::Actuators::ActuatorPin* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopActuator_, context, request, response, std::move(f));
}

void Actuators::Stub::experimental_async::StopActuator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopActuator_, context, request, response, std::move(f));
}

void Actuators::Stub::experimental_async::StopActuator(::grpc::ClientContext* context, const ::Actuators::ActuatorPin* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopActuator_, context, request, response, reactor);
}

void Actuators::Stub::experimental_async::StopActuator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopActuator_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Actuators::Stub::AsyncStopActuatorRaw(::grpc::ClientContext* context, const ::Actuators::ActuatorPin& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_StopActuator_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Actuators::Stub::PrepareAsyncStopActuatorRaw(::grpc::ClientContext* context, const ::Actuators::ActuatorPin& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_StopActuator_, context, request, false);
}

::grpc::Status Actuators::Stub::IsActuatorOn(::grpc::ClientContext* context, const ::Actuators::ActuatorPin& request, ::Actuators::ActuatorState* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_IsActuatorOn_, context, request, response);
}

void Actuators::Stub::experimental_async::IsActuatorOn(::grpc::ClientContext* context, const ::Actuators::ActuatorPin* request, ::Actuators::ActuatorState* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_IsActuatorOn_, context, request, response, std::move(f));
}

void Actuators::Stub::experimental_async::IsActuatorOn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Actuators::ActuatorState* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_IsActuatorOn_, context, request, response, std::move(f));
}

void Actuators::Stub::experimental_async::IsActuatorOn(::grpc::ClientContext* context, const ::Actuators::ActuatorPin* request, ::Actuators::ActuatorState* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_IsActuatorOn_, context, request, response, reactor);
}

void Actuators::Stub::experimental_async::IsActuatorOn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Actuators::ActuatorState* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_IsActuatorOn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Actuators::ActuatorState>* Actuators::Stub::AsyncIsActuatorOnRaw(::grpc::ClientContext* context, const ::Actuators::ActuatorPin& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Actuators::ActuatorState>::Create(channel_.get(), cq, rpcmethod_IsActuatorOn_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Actuators::ActuatorState>* Actuators::Stub::PrepareAsyncIsActuatorOnRaw(::grpc::ClientContext* context, const ::Actuators::ActuatorPin& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Actuators::ActuatorState>::Create(channel_.get(), cq, rpcmethod_IsActuatorOn_, context, request, false);
}

Actuators::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Actuators_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Actuators::Service, ::Actuators::ActuatorPin, ::google::protobuf::Empty>(
          [](Actuators::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::Actuators::ActuatorPin* req,
             ::google::protobuf::Empty* resp) {
               return service->StartActuator(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Actuators_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Actuators::Service, ::Actuators::ActuatorPin, ::google::protobuf::Empty>(
          [](Actuators::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::Actuators::ActuatorPin* req,
             ::google::protobuf::Empty* resp) {
               return service->StopActuator(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Actuators_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Actuators::Service, ::Actuators::ActuatorPin, ::Actuators::ActuatorState>(
          [](Actuators::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::Actuators::ActuatorPin* req,
             ::Actuators::ActuatorState* resp) {
               return service->IsActuatorOn(ctx, req, resp);
             }, this)));
}

Actuators::Service::~Service() {
}

::grpc::Status Actuators::Service::StartActuator(::grpc::ServerContext* context, const ::Actuators::ActuatorPin* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  const auto pin {request->pin()}
  GikfunAirDiaphragmPump pump;
  pump.Start(pin);
  return Status::OK;
}

::grpc::Status Actuators::Service::StopActuator(::grpc::ServerContext* context, const ::Actuators::ActuatorPin* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  const auto pin {request->pin()}
  GikfunAirDiaphragmPump pump;
  pump.Stop(pin);
  return Status::OK;
}

::grpc::Status Actuators::Service::IsActuatorOn(::grpc::ServerContext* context, const ::Actuators::ActuatorPin* request, ::Actuators::ActuatorState* response) {
  (void) context;
  (void) request;
  (void) response;
  const auto pin {request->pin()}
  GikfunAirDiaphragmPump pump;
  pump.Running(pin);
  respone->set_isOn(true);
  return Status::OK;
}


}  // namespace Actuators

